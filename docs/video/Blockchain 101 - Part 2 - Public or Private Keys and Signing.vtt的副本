WEBVTT

1
00:00:01.075 --> 00:00:01.860
欢迎回来

2
00:00:02.420 --> 00:00:04.460
上一个视频我解释了什么是区块链

3
00:00:04.460 --> 00:00:08.480
以及区块链在金融方面的应用（譬如货币的转账）

4
00:00:08.480 --> 00:00:13.900
我们弄这堆交易去将一个人的钱转给第二个人

5
00:00:13.920 --> 00:00:16.720
但是有个很大的问题

6
00:00:16.720 --> 00:00:24.740
我怎样做才能不让别人修改我自己的那笔转账记录呢？

7
00:00:25.620 --> 00:00:29.800
我们好像没讨论过这个问题

8
00:00:29.880 --> 00:00:35.260
所以，我们现在就要想办法

9
00:00:35.260 --> 00:00:40.900
不能让其他人修改我自己的那笔交易

10
00:00:40.900 --> 00:00:42.460
要做到这个效果呢

11
00:00:42.460 --> 00:00:46.380
我们需要搞懂另一个密码学概念

12
00:00:46.380 --> 00:00:50.020
这个就是「公私钥算法」，也可以说是「非对称加密算法」

13
00:00:50.020 --> 00:00:51.840
我们会用这套算法来做签名

14
00:00:51.840 --> 00:00:53.740
我们一起来看看

15
00:00:54.240 --> 00:00:56.960
这里是一对钥匙，分别是「公钥」和「私钥」

16
00:00:57.400 --> 00:01:02.300
这是一串私钥，很长的一串数字

17
00:01:02.740 --> 00:01:04.840
什么数字都是可以做私钥的

18
00:01:04.840 --> 00:01:07.700
你喜欢的话，就用一个「1」当私钥都可以

19
00:01:07.700 --> 00:01:11.140
但是这就很不安全了，毫无安全性可言

20
00:01:11.280 --> 00:01:20.620
所以为了安全起见，你一定要拿很长的并且是随机生成的数字当私钥

21
00:01:20.620 --> 00:01:20.620


22
00:01:20.620 --> 00:01:23.200
另外，你会发现我每次输入或改变一个私钥的数字

23
00:01:23.200 --> 00:01:27.680
下面的公钥就会重新生成

24
00:01:27.760 --> 00:01:31.540
这个就是为什么下面公钥不停变化的原因

25
00:01:32.920 --> 00:01:35.380
所谓「私钥」

26
00:01:35.400 --> 00:01:38.040
就是只有私人用的钥匙

27
00:01:38.040 --> 00:01:39.940
只有你自己才有的

28
00:01:39.940 --> 00:01:42.380
你永远不能告诉给别人知道的，OK?

29
00:01:43.260 --> 00:01:45.640
而所谓的「公钥」

30
00:01:45.640 --> 00:01:52.200
「公」是指：你将要告诉给全世界的人知道

31
00:01:52.200 --> 00:01:52.200


32
00:01:52.200 --> 00:01:56.920
也就是任何人知道都没有问题的

33
00:01:57.420 --> 00:02:02.680
也没有任何办法从公钥推导出私钥的，OK?

34
00:02:02.680 --> 00:02:11.380
也就是说：由公钥推导出私钥是不可逆的，只能是由私钥推导出公钥

35
00:02:11.380 --> 00:02:11.380


36
00:02:11.380 --> 00:02:23.900
而我现在要生成一堆很长、很随机的数字去做我的私钥

37
00:02:23.900 --> 00:02:23.900


38
00:02:23.900 --> 00:02:28.100
然后这个系统通过这串私钥变成公钥


39
00:02:28.100 --> 00:02:31.995
而这串数字就是我的私钥，我现在要用这个私钥来帮我签名

40
00:02:31.995 --> 00:02:33.555
我们过来这里看看

41
00:02:34.585 --> 00:02:36.955
这里是我需要签名的信息

42
00:02:37.315 --> 00:02:40.395
可以是任意信息，譬如你的名字、你的转账记录、或者一句有意义的话

43
00:02:40.400 --> 00:02:43.240
我输入：Hello, Anders（即係我）

44
00:02:43.240 --> 00:02:48.075
然后，这里是我的私钥，只有我才拥有的私钥

45
00:02:48.075 --> 00:02:48.075


46
00:02:48.075 --> 00:02:51.045
总之就是我要输入两部分的信息

47
00:02:51.045 --> 00:02:53.985
一个是有意义的一句话，另一个是只有我才拥有的私钥

48
00:02:54.385 --> 00:02:57.785
然后，我现在点击「签名(Sign)」

49
00:02:57.785 --> 00:03:00.825
下面就会多了一行我的「签名信息(Message Signature)」啦

50
00:03:00.825 --> 00:03:03.200
有了这串「签名信息(Message Signature)」

51
00:03:03.200 --> 00:03:05.500
我就可以发给其他人去验证了

52
00:03:05.500 --> 00:03:11.040
(别人)点击「验证(Verify)」这个按钮

53
00:03:11.040 --> 00:03:11.040


54
00:03:11.040 --> 00:03:13.980
这里别人输入早已经大家都知道的我的公钥

55
00:03:13.980 --> 00:03:16.760
当然，他们没有我的私钥

56
00:03:16.760 --> 00:03:17.820
因为我的私钥藏起来了

57
00:03:17.900 --> 00:03:20.440
但是我很早之前就公开了我的公钥

58
00:03:20.440 --> 00:03:24.435
人人都知道了我的公钥

59
00:03:24.440 --> 00:03:27.320
然后我再把这句有意义的话「Message」，也就是 Hello Anders

60
00:03:27.320 --> 00:03:30.340
和「签名信息(Message Signature)」

61
00:03:30.420 --> 00:03:33.020
一起发给别人，别人就能验证出我确实说过这句话 Hello Anders

62
00:03:33.020 --> 00:03:36.415
现在点击验证，背景一定是绿色验证通过（如果别人改过这句话，背景就会变红色验证不通过）

63
00:03:36.420 --> 00:03:39.800
意味着「Message」和「签名信息(Message Signature)」都是有效的

64
00:03:39.800 --> 00:03:45.680
同时也可以保证 Hello Anders 这句话确实是我说过的

65
00:03:45.680 --> 00:03:50.080
因为只有我才拥有这个「公钥(Public Key)」所对应唯一的私钥

66
00:03:50.080 --> 00:03:55.120
也就是说：如果我没有告诉任何人我的「私钥(Private Key)」

67
00:03:55.120 --> 00:03:56.680
那么 Hello Anders 这句话就一定是我说的，比皇帝的传国玉玺盖的章还真！

68
00:03:56.780 --> 00:04:01.500
这个就是数字签名和验证的过程

69
00:04:01.500 --> 00:04:05.040
看完了普通文字 Hello Anders 的数字签名过程

70
00:04:05.040 --> 00:04:08.075
我们来搞搞新花样

71
00:04:08.075 --> 00:04:10.995
我们来试试签名「交易」信息

72
00:04:10.995 --> 00:04:14.115
这个跟我们之前看的一样

73
00:04:14.115 --> 00:04:16.904
这次需要签名的信息就是

74
00:04:16.904 --> 00:04:23.180
我要将20美元由我的这个公钥

75
00:04:23.280 --> 00:04:26.020
转账去另外一个人的公钥名下

76
00:04:26.020 --> 00:04:32.580
我要帮这次交易签名

77
00:04:32.580 --> 00:04:32.580


78
00:04:32.580 --> 00:04:35.355
我拥有自己的私钥

79
00:04:35.360 --> 00:04:38.680
我就可以为这笔交易信息进行签名

80
00:04:38.680 --> 00:04:41.300
这笔交易信息包含这三部分（$20.00，我的公钥、对方的公钥）

81
00:04:41.760 --> 00:04:45.220
我点击「签名」就可以拿到这个「签名信息(Message Signature)」

82
00:04:45.465 --> 00:04:53.505
好了，我现在把「交易信息」和「签名信息(Message Signature)」广播出去

83
00:04:53.505 --> 00:04:53.505


84
00:04:53.505 --> 00:04:53.505


85
00:04:53.505 --> 00:04:56.375
其他人就会知道

86
00:04:56.375 --> 00:05:02.240
我在尝试将20美元由我的公钥转去另外一个人的公钥名下

87
00:05:02.240 --> 00:05:02.240


88
00:05:02.240 --> 00:05:06.525
你看到的这里用蓝色框住的公钥（也就是我的公钥）

89
00:05:06.525 --> 00:05:09.015
就代表

90
00:05:09.020 --> 00:05:13.980
你可以用这条公钥和下面的签名信息(Signature)来验证这条交易记录

91
00:05:14.100 --> 00:05:19.160
是否真的是由我自己掌握的私钥签名过

92
00:05:19.160 --> 00:05:20.275
点击「验证」

93
00:05:20.275 --> 00:05:22.615
背景变成绿色，也就是验证成功

94
00:05:22.620 --> 00:05:25.040
你就可以知道

95
00:05:25.040 --> 00:05:30.880
这条公钥背后的私钥的主人我

96
00:05:30.880 --> 00:05:35.380
在把20美元的钱转给别人

97
00:05:35.380 --> 00:05:36.705
好了

98
00:05:36.705 --> 00:05:40.000
我们现在将其运用在区块链上面

99
00:05:40.000 --> 00:05:44.840
我们返回去之前看看这个场景

100
00:05:44.840 --> 00:05:48.520
你会发现有一点点不同

101
00:05:48.560 --> 00:05:51.735
首先，这里的转账记录，不再是某个人具体的姓名

102
00:05:51.735 --> 00:05:54.685
取而代之的是公钥

103
00:05:54.685 --> 00:05:57.365
「转账人」和「收款人」都是公钥

104
00:05:57.365 --> 00:06:01.620
然后，把「签名信息(Message Signature)」也加在下面Sig这一栏

105
00:06:02.000 --> 00:06:05.460
而现在，这条交易表示

106
00:06:05.460 --> 00:06:05.460


107
00:06:05.460 --> 00:06:11.955
这个公钥在转入2.00美元到另外这个公钥名下

108
00:06:11.955 --> 00:06:11.955


109
00:06:11.955 --> 00:06:14.925
这条交易的「签名信息(Message Signature)」放在这里

110
00:06:14.925 --> 00:06:17.955
我们现在试一下改成25美元

111
00:06:17.955 --> 00:06:20.965
这个区块立马就变成无效了，与此同时，这个签名也是无效的

112
00:06:21.080 --> 00:06:23.800
网络上的其他节点Peer、钱包客户端等都不会承认这个区块

113
00:06:23.800 --> 00:06:25.980
这个区块作废，是绝对不会加入到其他节点Peer、钱包客户端里的区块链中

114
00:06:26.060 --> 00:06:28.220
这个签名信息是无效的，所以Sig这栏的字体变成了红色

115
00:06:28.220 --> 00:06:32.140
我们再次点击挖坑按钮「Mine」

116
00:06:32.140 --> 00:06:45.360
「矿工」会帮我们重新寻找一个Nonce值，使得Hash这栏前缀满足四个0

117
00:06:45.360 --> 00:06:51.680
然后这个区块就变回绿色了，也就是有效区块，但是，这个签名依然是红色的！！

118
00:06:51.720 --> 00:06:56.920
因为「矿工」没我的私钥

119
00:06:56.920 --> 00:06:59.960
所以「矿工」是没办法重新生成一个新的有效的签名信息

120
00:06:59.960 --> 00:07:15.040
这样就确保了这条转账交易记录是完全属于这个币的持有人

121
00:07:15.040 --> 00:07:15.040


122
00:07:15.040 --> 00:07:15.040


123
00:07:15.040 --> 00:07:29.660
这个就是利用公私钥签名算法来确保交易正确，决不会被别人修改的原理

124
00:07:29.660 --> 00:07:29.660


125
00:07:29.660 --> 00:07:34.140
现在看上去整个区块链一切都正常运转了

126
00:07:34.140 --> 00:07:47.005
如果你要新的地址、新的公钥，你只需要重新随机生成另外一个私钥就好

127
00:07:47.005 --> 00:07:55.885
你不需要像去传统的银行那带上身份证什么的去办理新的账户

128
00:07:55.885 --> 00:07:59.115
你只需要重新、随机地创建另一个私钥

129
00:07:59.115 --> 00:08:02.035
然后从这个新的私钥产生出新的公钥

130
00:08:02.035 --> 00:08:05.315
其他人就可以把钱转入你这个新的公钥

131
00:08:05.320 --> 00:08:08.780
所以这个就是区块链

132
00:08:08.780 --> 00:08:08.780


133
00:08:08.780 --> 00:08:14.860
是金融业的一种分布式记账系统(应用)

134
00:08:14.860 --> 00:08:17.600
不论是用什么形式的货币(Token)

135
00:08:17.660 --> 00:08:21.160
区块链都可以运用在金融行业

136
00:08:21.160 --> 00:08:27.980
而你现在应该知道一条区块链大概是怎么运作的啦

137
00:08:27.980 --> 00:08:27.980


138
00:08:27.980 --> 00:08:34.055
虽然有些细节我还是省略了

139
00:08:34.059 --> 00:08:42.894
但是整个概念，跟比特币或者其他加密货币的原理都是类似的

140
00:08:42.895 --> 00:08:45.775
这个就是区块链了，希望我能帮到你

141
00:08:45.775 --> 00:08:47.735
留个言

142
00:08:47.735 --> 00:08:52.485
告诉我你有什么想说的，下次再见啦（翻译：洪建强）

143
00:08:52.485 --> 00:00:00.000

